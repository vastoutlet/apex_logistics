Container(
                            width: 100,
                            height: 50,
                            decoration: BoxDecoration(
                              color: Constants.whiteDark,
                              borderRadius: BorderRadius.circular(15),
                            ),
                            child: Stack(
                              children: [
                                const Center(
                                    child: DefaultText(
                                  text: "Go Online",
                                  fontColor: Constants.whiteLight,
                                  weight: FontWeight.bold,
                                  size: 16,
                                )),
                                Obx(() => Positioned(
                                      left: controller.leftPosition.value,
                                      child: Draggable(
                                        axis: Axis.horizontal,
                                        feedback: _buildButton(),
                                        childWhenDragging: Container(),
                                        onDragEnd: (details) {
                                          double newPosition = details.offset.dx - 50;
                                          if (newPosition < 0) {
                                            newPosition = 0;
                                          } else if (newPosition > (300 - 100)) {
                                            newPosition = size.width - 100;
                                          }
                                          controller.leftPosition.value = newPosition;
                                        },
                                        child: _buildButton(),
                                      ),
                                    )),
                              ],
                            ),
                          )



Widget _buildButton() {
  return Container(
    width: 50,
    height: 50,
    decoration: BoxDecoration(
      color: Colors.white,
      borderRadius: BorderRadius.circular(50),
    ),
    child: const Center(
      child: Icon(Icons.arrow_forward_ios, color: Constants.whiteDark),
    ),
  );
}


//timeline
  var timelineItems = <TimelineItem>[].obs;

 addTimelineItem(TimelineItem item) {
    timelineItems.add(item);
  }

  addTimelineItem(TimelineItem(
          title: "Pick Up", subtitle: DefaultText(text: data["address"])));
      addTimelineItem(
        TimelineItem(
          title: "Current Location",
          subtitle: const Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              DefaultText(
                text: "Wada Street, Bauchi North",
              ),
              SizedBox(height: 10.0),
              MapFrame()
            ],
          ),
        ),
      );
      addTimelineItem(
        TimelineItem(
            title: "Destination",
            subtitle: const Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                DefaultText(
                  text: "Wada Street, Bauchi North",
                ),
                DefaultText(
                  text: "Delivered",
                  fontColor: Constants.primaryNormal,
                ),
              ],
            )),
      );
    
    class CustomTimeline extends StatelessWidget {
  final TimelineItem item;
  final bool isFirst;
  final bool isLast;
  final Color parcelIndicator;

  const CustomTimeline({
    super.key,
    required this.item,
    this.isFirst = false,
    this.isLast = false,
    this.parcelIndicator = Constants.primaryNormal,
  });

  @override
  Widget build(BuildContext context) {
    return TimelineTile(
      alignment: TimelineAlign.manual,
      lineXY: 0.1,
      isFirst: isFirst,
      isLast: isLast,
      indicatorStyle: IndicatorStyle(
          width: 20,
          color: Constants.primaryNormal,
          padding: const EdgeInsets.all(6),
          indicator: Container(
            width: 50,
            height: 50,
            decoration: BoxDecoration(
                shape: BoxShape.circle,
                border: Border.all(color: parcelIndicator, width: 5),
                color: Colors.white),
          )),
      endChild: _RightChild(
        title: item.title,
        message: item.subtitle,
      ),
      beforeLineStyle:
          const LineStyle(color: Constants.primaryNormal, thickness: 1),
    );
  }
}

class TimelineItem {
  final String title;
  final Widget subtitle;
  final bool isFirst;
  final bool isLast;
  final Color parcelIndicator;

  TimelineItem({
    required this.title,
    required this.subtitle,
    this.isFirst = false,
    this.isLast = false,
    this.parcelIndicator = Constants.primaryNormal,
  });
}

class _RightChild extends StatelessWidget {
  final String title;
  final Widget message;
  final Widget? mapFrame;
  final bool disabled;

  const _RightChild({
    super.key,
    required this.title,
    required this.message,
    this.disabled = false,
    this.mapFrame,
  });

  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 15.0),
      child: Row(
        children: <Widget>[
          Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            mainAxisSize: MainAxisSize.min,
            children: <Widget>[
              DefaultText(
                text: title,
                fontColor:
                    disabled ? const Color(0xFFBABABA) : Constants.blackNormal,
                size: 18,
                weight: FontWeight.bold,
              ),
              const SizedBox(height: 6),
              message,
            ],
          ),
        ],
      ),
    );
  }
}


//UI
ListView.builder(
                    shrinkWrap: true,
                    itemCount: controller.stepperItem.length,
                    itemBuilder: (context, index) {
                      final item = controller.stepperItem[index];
                      return

                      CustomTimeline(
                        item: item,
                        isFirst: index == 0,
                        isLast:
                            index == controller.timelineItems.length - 1,
                        parcelIndicator: item.parcelIndicator,
                      );
                    }),



Positioned(
                left: 0,
                right: 0,
                bottom: 0,
                child: AnimatedSize(
                  duration: Duration(milliseconds: 150),
                  curve: Curves.easeIn,
                  child: Container(
                    height: searchSheetHeight,
                    decoration: BoxDecoration(
                      color: Colors.white,
                      borderRadius: BorderRadius.only(
                        topLeft: Radius.circular(15),
                        topRight: Radius.circular(15),
                      ),
                      boxShadow: [
                        BoxShadow(
                          color: Colors.black26,
                          blurRadius: 15,
                          spreadRadius: 0.5,
                          offset: Offset(0.7, 0.7),
                        ),
                      ],
                    ),
                    child: Padding(
                      padding:
                          EdgeInsets.symmetric(horizontal: 24, vertical: 18.0),
                      child: SingleChildScrollView(
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: <Widget>[
                            SizedBox(
                              height: 15,
                            ),
                            Text(
                              'Nice to see you',
                              style: TextStyle(fontSize: 10),
                            ),
                            Text(
                              'Where are you going?',
                              style: TextStyle(
                                  fontSize: 18, fontFamily: 'Brand-Bold'),
                            ),
                            SizedBox(
                              height: 20,
                            ),
                            GestureDetector(
                              onTap: () async {
                                var response = await Navigator.push(
                                    context,
                                    MaterialPageRoute(
                                      builder: (context) => PaymentMethod(),
                                    ));
                                if (response == 'getDirection') {
                                  // showDetailSheet(context);
                                } else {
                                  print(response);
                                }
                              },
                              child: Container(
                                decoration: BoxDecoration(
                                    color: Colors.white,
                                    borderRadius: BorderRadius.circular(4),
                                    boxShadow: [
                                      BoxShadow(
                                        color: Colors.black12,
                                        blurRadius: 5.0,
                                        spreadRadius: 0.5,
                                        offset: Offset(
                                          0.7,
                                          0.7,
                                        ),
                                      )
                                    ]),
                                child: Padding(
                                  padding: const EdgeInsets.all(12.0),
                                  child: Row(
                                    children: <Widget>[
                                      Icon(
                                        Icons.search,
                                        color: Colors.blueAccent,
                                      ),
                                      SizedBox(
                                        width: 10,
                                      ),
                                      Text('Search Destination'),
                                    ],
                                  ),
                                ),
                              ),
                            ),
                            SizedBox(height: 22),
                            Row(
                              children: <Widget>[
                                Icon(
                                  Icons.home,
                                  color: Colors.green,
                                ),
                                SizedBox(
                                  width: 12,
                                ),
                                Column(
                                  crossAxisAlignment: CrossAxisAlignment.start,
                                  children: <Widget>[
                                    Text('Add Home'),
                                    SizedBox(
                                      height: 3,
                                    ),
                                    Text('Your residential address',
                                        style: TextStyle(
                                            fontSize: 11,
                                            color: Colors.yellow)),
                                  ],
                                )
                              ],
                            ),
                            SizedBox(
                              height: 10,
                            ),
                            // BrandDivider(),
                            SizedBox(
                              height: 16,
                            ),
                            Row(
                              children: <Widget>[
                                Icon(
                                  Icons.home,
                                  color: Constants.primaryNormal,
                                ),
                                SizedBox(
                                  width: 12,
                                ),
                                Column(
                                  crossAxisAlignment: CrossAxisAlignment.start,
                                  children: <Widget>[
                                    Text('Add work'),
                                    SizedBox(
                                      height: 3,
                                    ),
                                    Text('Your office address',
                                        style: TextStyle(
                                            fontSize: 11, color: Colors.green)),
                                  ],
                                )
                              ],
                            ),
                          ],
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            





//decideRoute

import 'package:apex_logistics/components/defaultAppBar2.dart';
import 'package:apex_logistics/components/defaultButton.dart';
import 'package:apex_logistics/components/defaultForm.dart';
import 'package:apex_logistics/components/defaultSideBar.dart';
import 'package:apex_logistics/components/defaultText.dart';
import 'package:apex_logistics/components/showTripModals.dart';
import 'package:apex_logistics/controllers/decide_route_controller.dart';
import 'package:apex_logistics/utils/constant.dart';
import 'package:apex_logistics/views/home/users/confirm_address.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_styled_toast/flutter_styled_toast.dart';
import 'package:get/get.dart';

// class DraggableController extends GetxController {
//   Rx<DraggableScrollableController> draggableScrollableController =
//       DraggableScrollableController().obs;

//   @override
//   void onInit() {
//     super.onInit();
//     WidgetsBinding.instance.addPostFrameCallback((_) {
//       // Now you can safely use the draggableScrollableController.value
//     });
//   }
// }

class DecideRoute extends StatelessWidget {
  DecideRoute({super.key});

  final controller = Get.put(DecideRouteController());

  final scaffoldKey = GlobalKey<ScaffoldState>();

  DateTime timeBackPressed = DateTime.now();

  @override
  Widget build(BuildContext context) {
    // final dragController = Get.put(DraggableController());
    final DraggableScrollableController sheetController =
        DraggableScrollableController();
    final size = MediaQuery.of(context).size;

    return Scaffold(
      key: scaffoldKey,
      body: SafeArea(
        child: PopScope(
          canPop: false,
          onPopInvoked: (bool didPop) async {
            if (sheetController.size > 100) {
              //dummy
            } else {
              final difference = DateTime.now().difference(timeBackPressed);
              final isExitWarning = difference >= const Duration(seconds: 2);
              timeBackPressed = DateTime.now();

              if (didPop) {
                return;
              }

              if (isExitWarning) {
                showToast(
                  'Press back again to exit',
                  context: context,
                  animation: StyledToastAnimation.slideFromTopFade,
                  position: StyledToastPosition.top,
                );
              } else {
                SystemNavigator.pop();
              }
            }
          },
          child: Stack(
            children: [
              // MAP
              Image.asset(
                "assets/images/map.png",
                fit: BoxFit.fill,
                height: size.height,
              ),
              Padding(
                padding: const EdgeInsets.symmetric(
                  horizontal: 30,
                  vertical: 10,
                ),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    // APP BAR
                    DefaultAppBar2(
                      backgroundColor: Constants.whiteLight,
                      iconColor: Constants.blackDark,
                      icon: Icons.menu,
                      onPressed: () => scaffoldKey.currentState!.openDrawer(),
                    ),
                  ],
                ),
              ),

              Align(
                alignment: Alignment.bottomCenter,
                child: DraggableScrollableSheet(
                    controller: sheetController,
                    // snap: true,
                    // maxChildSize: 0.9,
                    initialChildSize: 0.3,
                    minChildSize: 0.3,
                    // expand: false,
                    builder: (context, scrollController) {
                      return Container(
                        color: Colors.white,
                        child: SingleChildScrollView(
                          controller: scrollController,
                          child: Container(
                            width: size.width,
                            height: size.height / 3,
                            decoration: const BoxDecoration(
                              color: Constants.whiteLight,
                              borderRadius: BorderRadius.only(
                                topLeft: Radius.circular(20),
                                topRight: Radius.circular(20),
                              ),
                            ),
                            child: Padding(
                              padding: const EdgeInsets.symmetric(
                                  vertical: 30, horizontal: 20),
                              child: Column(
                                children: [
                                  if (sheetController.size == 1.0) ...[
                                    Row(
                                      children: [
                                        GestureDetector(
                                            onTap: () =>
                                                sheetController.animateTo(0.3,
                                                    duration: const Duration(
                                                        milliseconds: 100),
                                                    curve: Curves.bounceInOut),
                                            child:
                                                const Icon(Icons.arrow_back)),
                                        const Center(
                                          child: DefaultText(
                                            text: "Where to?",
                                            weight: FontWeight.bold,
                                            size: 18.0,
                                          ),
                                        )
                                      ],
                                    ),
                                    const SizedBox(height: 20.0),
                                  ],
                                  const DefaultForm(
                                    icon: Icon(Icons.my_location),
                                    hintText: "Current Location",
                                  ),
                                  const SizedBox(height: 10.0),
                                  DefaultForm(
                                    onTap: () {
                                      if (sheetController.size <= 0.3) {
                                        sheetController.animateTo(1.0,
                                            duration: const Duration(
                                                milliseconds: 300),
                                            curve: Curves.bounceIn);
                                      }
                                    },
                                    icon: const Icon(Icons.location_on),
                                    hintText: "Destination",
                                  ),
                                  const SizedBox(height: 8.0),
                                  const Row(
                                    mainAxisAlignment: MainAxisAlignment.end,
                                    children: [
                                      Icon(
                                        Icons.add_circle_outline_outlined,
                                        color: Constants.primaryNormal,
                                      ),
                                      SizedBox(width: 5.0),
                                      DefaultText(text: "Add Stops"),
                                    ],
                                  ),
                                  const SizedBox(height: 20.0),
                                  DefaultButton(
                                    onPressed: () => showTripModals(
                                        context, ConfirmAddress()),
                                    child: const DefaultText(
                                      text: "Create Trip",
                                      fontColor: Constants.whiteNormal,
                                      size: 18,
                                    ),
                                  ),
                                ],
                              ),
                            ),
                          ),
                        ),
                      );
                    }),
              ),
            ],
          ),
        ),
      ),
      drawer: DefaultSideBar(),
      // bottomSheet: Container(
      //   width: size.width,
      //   height: size.height / 3,
      //   decoration: const BoxDecoration(
      //     color: Constants.whiteLight,
      //     borderRadius: BorderRadius.only(
      //       topLeft: Radius.circular(20),
      //       topRight: Radius.circular(20),
      //     ),
      //   ),
      //   child: Padding(
      //     padding: const EdgeInsets.symmetric(vertical: 30, horizontal: 20),
      //     child: Column(
      //       children:  [
      //         const DefaultForm(
      //           icon: Icon(Icons.my_location),
      //           hintText: "Current Location",
      //         ),
      //         const SizedBox(height: 10.0),
      //         const DefaultForm(
      //           icon: Icon(Icons.location_on),
      //           hintText: "Destination",
      //         ),
      //         const SizedBox(height: 8.0),
      //         const Row(
      //           mainAxisAlignment: MainAxisAlignment.end,
      //           children: [
      //             Icon(
      //               Icons.add_circle_outline_outlined,
      //               color: Constants.primaryNormal,
      //             ),
      //             SizedBox(width: 5.0),
      //             DefaultText(text: "Add Stops"),
      //           ],
      //         ),
      //         const SizedBox(height: 20.0),
      //         DefaultButton(
      //           onPressed: () => showTripModals(context, ConfirmAddress()),
      //           child: const DefaultText(
      //             text: "Create Trip",
      //             fontColor: Constants.whiteNormal,
      //             size: 18,
      //           ),
      //         ),
      //       ],
      //     ),
      //   ),
      // ),
    );
  }
}

Widget _buildBottomSheet(BuildContext context) {
  return DraggableScrollableSheet(
    initialChildSize: 0.4,
    maxChildSize: 0.9,
    minChildSize: 0.2,
    expand: false,
    builder: (context, scrollController) {
      return SingleChildScrollView(
        controller: scrollController,
        child: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Column(
            children: [
              DefaultForm(
                icon: Icon(Icons.my_location),
                hintText: "Current Location",
              ),
              SizedBox(height: 10.0),
              DefaultForm(
                icon: Icon(Icons.location_on),
                hintText: "Destination",
              ),
              SizedBox(height: 8.0),
              Row(
                mainAxisAlignment: MainAxisAlignment.end,
                children: [
                  Icon(
                    Icons.add_circle_outline_outlined,
                    color: Constants.primaryNormal,
                  ),
                  SizedBox(width: 5.0),
                  Text("Add Stops",
                      style: TextStyle(color: Constants.primaryNormal)),
                ],
              ),
              SizedBox(height: 20.0),
              ElevatedButton(
                onPressed: () => showTripModals(context, ConfirmAddress()),
                child: Text("Create Trip",
                    style: TextStyle(color: Colors.white, fontSize: 18)),
              ),
            ],
          ),
        ),
      );
    },
  );
}
